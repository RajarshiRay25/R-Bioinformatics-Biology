q()
clear
var_1 <- "Hello"
var_1
a<-1
print(a)
a<-1
print(a)
clearPushBack()
q()
num_2 <- 23
# Print
num_1 <- 23
num_2 <- 23
print(num_1+num_2)
class(num_1)
wish <- "Good Morning"
print(wish)
class(wish)
typeof(wish)
com <- 1+4i
class(com)
vec_1 <- c(1,2,3,4,5,6)
length(vec_1)
class(vec_1)
typeof(vec_1)
vec_2 <- c(1L,2L,3L,4L)
length(vec_2)
class(vec_2)
typeof(vec_2)
vec_test <- c(1,2,3,4,5)
as.numeric(vec_test)
as.character(vec_test)
as.complex(vec_test)
vec_char <- c("a","b","c")
as.numeric(vec_char)
as.character(vec_char)
as.complex(vec_char)
list_1 <- lsit("R Lang","2022","6")
list_1 <- list("R Lang","2022","6")
names(list_1) <-("Programming Language","Year","Semester")
list_1
names(list_1) <-c("Programming Language","Year","Semester")
list_1
names(list_1) <-list("Programming Language","Year","Semester")
list_1
pwd
list_1$`Programming Language`
matrix_1 <- matrix(1:4,nrow = 2)
matrix_1
matrix_2 <- matrix(1:6,byrow = TRUE,nrow = 2)
matrix_2
matrix_2 <- matrix(1:6,byrow = TRUE,nrow = 2)  # Set values by row
matrix_2
matrix_3 <- matrix(1:6,ncol = 2)
matrix_3
rbind(1:4,5:8)
cbind(1:4,5:8)
matrix_bind <- matrix(7:10, nrow = 1,byrow = TRUE)
matrix_bind
rbind(matrix_bind,5:8)
rbind(matrix_bind,5:8,1:4)
matrix_letter = matrix(LETTERS[1:6],nrow = 2)
matrix_letter
matrix_letter <-  matrix(LETTERS[1:6],nrow = 2)
matrix_letter
matrix_ind <- matrix(1:6,nrow = 2)
matrix_ind
cbind(matrix_ind,matrix_letter)
progLang <- c("C","Python","JavaScript","R","SQL")
accuracy <- c(75,90,65,40,35)
semester <- c(2,2,4,5,6)
dataFrame <- data.frame(progLang,accuracy,semester)
dataFrame
dataFrame$progLang
dataFrame[["accuracy"]]
dataFrame[3,2]
year <- c(2021,2021,2022,2022,2023)
dataFrame$year <- year
dataFrame
stream <- c("Common","Common","BT","BT","BT")
dataFrame[["stream"]] <- stream
dataFrame
newUpdate <- c("C++",30,7,2023,"BT")
rbind(dataFrame,newUpdate)
newCol <- c(FALSE,TRUE,FALSE,TRUE,TRUE,FALSE)
## sort
dataSet_rank <- sort(dataFrame$accuracy)
dataSet_rank
dataFrame[dataSet_rank]
dataFrame[dataSet_rank,]
## order - order()
dataSet_rank <- order(dataFrame$accuracy)
dataSet_rank
dataFrame[dataSet_rank,]
dataSet_rank <- sort(dataFrame$accuracy,decreasing = TRUE)
dataSet_rank
dataFrame[dataSet_rank,]
dataSet_rank <- order(dataFrame$accuracy,decreasing = TRUE)
dataSet_rank
dataFrame[dataSet_rank,]
dnaSeq <- seq("A","T","G"."C")
dnaSeq <- seq("A","T","G","C")
dnaSeq
oddNo <- seq(1,20,2)
oddNo
temperature <- c(40,50,60,70,80)
temperature <- c(40,50,60,70,80)
days <- c("M","T","W","Th","F")
names(temperature) <- days
temperature
vec_1 <- c(1,2,3,4,5,6)
vec_2 <- c(4,5,6,7,8,9)
vec_1 + vec_2
vec_1 - vec_2
vec_1 / vec_2
vec_1 * vec_2
max(vec_1)
min(vec_1)
sd(vec_1)
markets <- c(2010,2011,2012,NA,2014,2015)
markets[markets<2013]
na.omit(markets[markets<2013])
print(na.omit(markets[markets<2013]))
na.omit(markets[markets<2013])
markets[markets<2013]   # conditional
markets
na.rm(markets)
sum(markets)
sum(markets,na.rm = TRUE)
mean(markets)
mean(markets,na.rm = TRUE)
max(market,na.rm = TRUE)
max(markets,na.rm = TRUE)
gc()
install.packages("dplyr")
library(dplyr)
install.packages('nycflights13')
library('nycflights13')
head(flights)
View(flights)
head(flights[flights$month==07])
head(flights[flights$month==7])
head(flights[flights$year==2013])
rlang::last_error()
clear
setwd("C:/Users/RAJARSHI RAY/OneDrive/CODE/R-Bioinformatics-BioSciences")
rangeIn <- readline("Enter Limit of sequence : ")
5
nset <- c()
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readLine("Enter Nucleotide Base :")
append(nset,nBases)
}
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readLine("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
A
rangeIn <- readline("Enter Limit of sequence : ")
5
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readLine("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
nBases <- readLine("Enter Nucleotide Base :")
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
for (cn in 1:6) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
nset
nset <- c()
for (cn in 1:6) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
nset
append(nset[cn],nBases)
for (cn in 1:6) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
}
}
for (cn in 1:6) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
cn<-cn+1
}
nseq
nset
nset <- c()
cn<-0
for (cn in 1:6) {
nBases <- readline("Enter Nucleotide Base :")
append(nset[cn],nBases)
cn<-cn+1
}
A
nset
cn<-0
class(rangeIn)
rangeIn <- as.integer(readline("Enter Limit of sequence : "))
class(rangeIn)
nset <- c()
cn<-0
for (cn in 1:rangeIn) {
nBases <- readline("Enter Nucleotide Base :")
nset[cn] <- nBases
}
nset
print(paste("DNA Sequence : ",nset))
nset <- list()
for (cn in 1:rangeIn) {
nBases <- readline("Enter Nucleotide Base :")
nset[cn] <- nBases
}
(paste("DNA Sequence : ",nset))
print(nset)
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readline("Enter Nucleotide Base :")
nset[cn] <- nBases
}
print(nset)
print(length(nset))
for (i in length(nset)) {
if(nset[i]=="A"){
countA <- countA+1
}
}
countA <- 0
for (i in length(nset)) {
if(nset[i]=="A"){
countA <- countA+1
}
}
countA
rangeIn <- as.integer(readline("Enter Limit of sequence : "))
nset <- c()
for (cn in 1:rangeIn) {
nBases <- readline("Enter Nucleotide Base :")
nset[cn] <- nBases
}
print(length(nset))
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in length(nset)) {
if(nset[i]=="A"){
countA <- countA+1
}
if(nset[i]=="T"){
countT <- countT+1
}
if(nset[i]=="G"){
countG <- countG+1
}
if(set[i]=="C"){
countC <- countC+1
}
}
for (i in length(nset)) {
if(nset[i]=="A"){
countA <- countA+1
}
if(nset[i]=="T"){
countT <- countT+1
}
if(nset[i]=="G"){
countG <- countG+1
}
if(nset[i]=="C"){
countC <- countC+1
}
}
countA
nset
countA
countC
for (i in length(nset)) {
if(nset[i]=="A"){
countA <- countA+1
}
if(nset[i]=="T"){
countT <- countT+1
}
if(nset[i]=="G"){
countG <- countG+1
}
if(nset[i]=="C"){
countC <- countC+1
}
}
countC
if(nset[i]=="A"){
countA = countA+1
}
for (i in length(nset)) {
if(nset[i]=="A"){
countA = countA+1
}
if(nset[i]=="T"){
countT <- countT+1
}
if(nset[i]=="G"){
countG <- countG+1
}
if(nset[i]=="C"){
countC <- countC+1
}
}
countA
for (i in 1:length(nset)) {
if(nset[i]=="A"){
countA = countA+1
}
if(nset[i]=="T"){
countT <- countT+1
}
if(nset[i]=="G"){
countG <- countG+1
}
if(nset[i]=="C"){
countC <- countC+1
}
}
countA
countT
for (i in 1:length(nset)) {
if(nset[i]=="A"){
countA = countA+1
}
if(nset[i]=="T"){
countT=countT+1
}
if(nset[i]=="G"){
countG = countG+1
}
if(nset[i]=="C"){
countC = countC+1
}
}
countG
nset
for (i in 1:length(nset)) {
if(nset[i]=="A"){
countA = countA+1
}
else if(nset[i]=="T"){
countT=countT+1
}
else if(nset[i]=="G"){
countG = countG+1
}
else if(nset[i]=="C"){
countC = countC+1
}
}
countA
countA = 0
countT = 0
countG = 0
countC = 0
for (i in 1:length(nset)) {
if(nset[i]=="A"){
countA = countA+1
}
else if(nset[i]=="T"){
countT=countT+1
}
else if(nset[i]=="G"){
countG = countG+1
}
else if(nset[i]=="C"){
countC = countC+1
}
}
countA
nset
countT
countG
